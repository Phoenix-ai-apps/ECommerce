apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'



android {
    def globalConfiguration = rootProject.extensions.getByName("ext")

    def STRING = "String"
    def INT = "int"

    def VARIABLE_VERSION = "APP_VERSION"
    def VARIABLE_APP_ENVIRONMENT = "APP_ENVIRONMENT"
    def VARIABLE_BASE_URL = "BASE_URL"

    def VALUE_VERSION_UAT = '"1.0"'
    def VALUE_VERSION_STAGING = '"1.0"'
    def VALUE_VERSION_LIVE = '"1.0"'
    def VALUE_BASE_URL = '"https://stark-spire-93433.herokuapp.com/"'

    def VALUE_APP_ENVIRONMENT_UAT = '"UAT"'
    def VALUE_APP_ENVIRONMENT_LIVE = '"LIVE"'
    def VALUE_APP_ENVIRONMENT_STAGING = '"STAGING"'

    compileSdkVersion globalConfiguration.getAt("compileSdk")
    buildToolsVersion globalConfiguration.getAt("buildTools")



    defaultConfig {
        applicationId globalConfiguration.getAt("androidApplicationId")
        minSdkVersion globalConfiguration.getAt("minSdkVersion")
        targetSdkVersion globalConfiguration.getAt("targetSdkVersion")
        versionCode globalConfiguration.getAt("versionCode")
        versionName globalConfiguration.getAt("versionName")
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        archivesBaseName = "$applicationId-v$versionName"
        resConfigs "en"

        multiDexEnabled true


    }


    signingConfigs {
        debug {
            keyAlias 'androiddebugkey'
            keyPassword 'android'
            storeFile file('../keystoreDebug/debug.keystore')
            storePassword 'android'
        }
        release {
            keyAlias KEY_ALIAS
            keyPassword KEY_PASSWORD
            storeFile file('/home/administrator/Documents/SampleProjects/ECommerce/keystoreRelease/ecommerce.jks')
            storePassword KEYSTORE_PASSWORD
        }
    }


    buildTypes {
        debug {
            versionNameSuffix "1.0"
            debuggable true
            minifyEnabled false
            shrinkResources false
            zipAlignEnabled true
            buildConfigField STRING, VARIABLE_VERSION, VALUE_VERSION_UAT
            buildConfigField STRING, VARIABLE_BASE_URL, VALUE_BASE_URL
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
        }
        staging {
            versionNameSuffix "1.0"
            debuggable true
            minifyEnabled false
            shrinkResources false
            zipAlignEnabled true
            buildConfigField STRING, VARIABLE_VERSION, VALUE_VERSION_STAGING
            buildConfigField STRING, VARIABLE_BASE_URL, VALUE_BASE_URL
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        release {
            versionNameSuffix "1.0"
            debuggable false
            minifyEnabled true
            shrinkResources true
            zipAlignEnabled true
            buildConfigField STRING, VARIABLE_VERSION, VALUE_VERSION_LIVE
            buildConfigField STRING, VARIABLE_BASE_URL, VALUE_BASE_URL
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }


    configurations.all {
        resolutionStrategy.force 'com.google.code.findbugs:jsr305:1.3.9'
    }

    applicationVariants.all { variant ->
        renameAPK(variant, globalConfiguration)
    }

    compileOptions {
        targetCompatibility 1.8
        sourceCompatibility 1.8
    }

    lintOptions {
        checkReleaseBuilds false
    }

}


def renameAPK(variant, globalConfiguration) {
    variant.outputs.each { output ->
        // def applicationName = globalConfiguration.getAt("projectName");
        def applicationName = "My E-Commerce";
        def file = output.packageApplication.outputFile
        def buildType = variant.variantData.variantConfiguration.buildType.name
        def fileName = applicationName + " APK " + assignNewBuildTypeName(buildType) + " v" + variant.versionName + ".apk"
        output.packageApplication.outputFile = new File(file.parent, fileName)
    }
}

def assignNewBuildTypeName(String buildType) {
    def newBuildTypeName = ""
    if (buildType == "debug") {
        newBuildTypeName = "UAT"
    } else if (buildType == "staging") {
        newBuildTypeName = "STAGING"
    } else if (buildType == "release") {
        newBuildTypeName = "LIVE"
    }
    return newBuildTypeName
}


dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    testCompile globalTestDependencies.junit
    testCompile globalTestDependencies.mockito
    androidTestCompile(globalTestDependencies.espresso, {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    // androidTestCompile globalTestDependencies.supportAnnotations
    // androidTestCompile globalTestDependencies.testRunner


    compile globalDependencies.butterknife
    annotationProcessor globalDependencies.butterknifeCompiler

    compile globalDependencies.supportV4
    compile globalDependencies.appcompatV7
    compile globalDependencies.design
    compile globalDependencies.recyclerView
    compile globalDependencies.cardView
    compile globalDependencies.dagger
    annotationProcessor globalDependencies.daggerCompiler
    // compile globalDependencies.daggerActivity
    // annotationProcessor globalDependencies.daggerActivityCompiler
    // compile globalDependencies.daggerSupport
    compile globalDependencies.butterknifeCompiler
    compile globalDependencies.butterknife
    compile globalDependencies.gson
    compile globalDependencies.sdp
    compile globalDependencies.volley

    /*compile globalDependencies.multiDex*/

    compile 'com.android.support.constraint:constraint-layout:1.0.2'
}
